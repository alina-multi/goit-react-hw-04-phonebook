{"ast":null,"code":"var _jsxFileName = \"/Users/alinamulti/Desktop/react_hw/goit-react-hw-04-phonebook/src/components/Form/Form.jsx\";\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ErrorNameMessage = \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\nconst ErrorNumberMessage = \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\";\nconst Regex = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nconst schema = Yup.object().shape({\n  name: Yup.string().matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, ErrorNameMessage).required(),\n  number: Yup.string().matches(Regex, ErrorNumberMessage).required()\n});\n\nconst Basic = _ref => {\n  let {\n    setNewContact\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: '',\n        number: ''\n      },\n      onSubmit: (values, _ref2) => {\n        let {\n          resetForm\n        } = _ref2;\n        setNewContact({\n          id: nanoid(),\n          ...values\n        });\n        resetForm();\n      },\n      validationSchema: schema,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"name\",\n          name: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"name\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"number\",\n          children: \"Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"number\",\n          name: \"number\",\n          type: \"tel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"number\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Basic;\nBasic.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Basic\"\n};\nexport default Basic; //\n\nvar _c;\n\n$RefreshReg$(_c, \"Basic\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/Form/Form.jsx\"] = {\n    name: \"Basic\",\n    docgenInfo: Basic.__docgenInfo,\n    path: \"src/components/Form/Form.jsx\"\n  };\n}","map":{"version":3,"sources":["/Users/alinamulti/Desktop/react_hw/goit-react-hw-04-phonebook/src/components/Form/Form.jsx"],"names":["React","nanoid","Formik","Field","Form","ErrorMessage","Yup","ErrorNameMessage","ErrorNumberMessage","Regex","schema","object","shape","name","string","matches","required","number","Basic","setNewContact","values","resetForm","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,YAA9B,QAAiD,QAAjD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AAEA,MAAOC,gBAAgB,GAAG,wIAA1B;AACA,MAAMC,kBAAkB,GAAG,8FAA3B;AACA,MAAMC,KAAK,GAAG,4EAAd;AAEA,MAAMC,MAAM,GAAGJ,GAAG,CAACK,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,EAAAA,IAAI,EAAEP,GAAG,CAACQ,MAAJ,GACLC,OADK,CACG,4DADH,EACiER,gBADjE,EAELS,QAFK,EAD0B;AAIhCC,EAAAA,MAAM,EAAEX,GAAG,CAACQ,MAAJ,GACTC,OADS,CACDN,KADC,EACMD,kBADN,EAEPQ,QAFO;AAJwB,CAAnB,CAAf;;AAUC,MAAME,KAAK,GAAG;AAAA,MAAC;AAACC,IAAAA;AAAD,GAAD;AAAA,sBACX;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AACbN,QAAAA,IAAI,EAAE,EADO;AAEbI,QAAAA,MAAM,EAAE;AAFK,OADjB;AAKE,MAAA,QAAQ,EAAG,CAACG,MAAD,YAAyB;AAAA,YAAhB;AAACC,UAAAA;AAAD,SAAgB;AACtCF,QAAAA,aAAa,CAAC;AAACG,UAAAA,EAAE,EAAErB,MAAM,EAAX;AAAe,aAAGmB;AAAlB,SAAD,CAAb;AAEAC,QAAAA,SAAS;AACN,OATH;AAWE,MAAA,gBAAgB,EAAEX,MAXpB;AAAA,6BAcE,QAAC,IAAD;AAAM,QAAA,YAAY,EAAC,KAAnB;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,EAAE,EAAC,MAAV;AAAiB,UAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,MAAnB;AAA2B,UAAA,SAAS,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAO,UAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,KAAD;AAAO,UAAA,EAAE,EAAC,QAAV;AAAmB,UAAA,IAAI,EAAC,QAAxB;AAAiC,UAAA,IAAI,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,gBALF,eAME,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAA4B,UAAA,SAAS,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAdF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADW;AAAA,CAAd;;KAAMQ,K;;;;;;AA8BN,eAAeA,KAAf,C,CAGD","sourcesContent":["import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Formik, Field, Form, ErrorMessage} from 'formik';\nimport * as Yup from 'yup';\n\nconst  ErrorNameMessage = \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\nconst ErrorNumberMessage = \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\nconst Regex = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n  .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, ErrorNameMessage)\n  .required(),\n  number: Yup.string()\n.matches(Regex, ErrorNumberMessage)\n  .required()\n});\n\n\n const Basic = ({setNewContact}) => (\n    <div>\n      <h1>Sign Up</h1>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        onSubmit={ (values, {resetForm}) => {\n      setNewContact({id: nanoid(), ...values});\n    \n      resetForm()\n        }}\n\n        validationSchema={schema}\n     \n      >\n        <Form autoComplete='off'>\n          <label htmlFor=\"name\">First Name</label>\n          <Field id=\"name\" name=\"name\" />\n          <ErrorMessage name=\"name\"  component=\"div\"/>\n          <label htmlFor=\"number\">Number</label>\n          <Field id=\"number\" name=\"number\" type=\"tel\"  />   \n          <ErrorMessage name=\"number\" component=\"div\"/>\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n\n export default Basic;\n\n\n//\n\n"]},"metadata":{},"sourceType":"module"}